{
  "name": "git-emit",
  "description": "expose git hooks through an event emitter",
  "version": "0.0.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/node-git-emit.git"
  },
  "main": "index.js",
  "keywords": [
    "git",
    "hook",
    "emit",
    "repository"
  ],
  "directories": {
    "lib": ".",
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "dependencies": {
    "seq": "0.3.x",
    "dnode": "0.9.x"
  },
  "devDependencies": {
    "tap": "0.0.x",
    "pushover": "0.0.x"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "license": "MIT",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "readme": "git-emit\n========\n\nExpose git hooks through an EventEmitter.\n\nThis module is super handy when used in conjunction with\n[pushover](https://github.com/substack/pushover).\n\nexample\n=======\n\nreject.js\n---------\n\n``` js\n// randomly reject 50% of commits\nvar em = require('git-emit')(__dirname + '/repo.git');\n\nem.on('update', function (update) {\n    if (Math.random() > 0.5) update.reject()\n    else update.accept()\n});\n```\n\nNow we can create a new bare repo and run reject.js to listen for commits:\n\n```\n$ git init --bare repo.git\nInitialized empty Git repository in /home/substack/projects/node-git-emit/example/repo.git/\n$ node reject.js\n```\n\nThe first time, our commit is rejected:\n\n```\n$ git push ~/projects/node-git-emit/example/repo.git master\nCounting objects: 43, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (36/36), done.\nWriting objects: 100% (43/43), 6.15 KiB, done.\nTotal 43 (delta 18), reused 0 (delta 0)\nUnpacking objects: 100% (43/43), done.\nremote: error: hook declined to update refs/heads/master\nTo example/repo.git\n ! [remote rejected] master -> master (hook declined)\nerror: failed to push some refs to 'example/repo.git'\n```\nbut the second time, the commit goes through!\n\n```\n$ git push ~/projects/node-git-emit/example/repo.git master\nCounting objects: 43, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (36/36), done.\nWriting objects: 100% (43/43), 6.15 KiB, done.\nTotal 43 (delta 18), reused 0 (delta 0)\nUnpacking objects: 100% (43/43), done.\nTo example/repo.git\n * [new branch]      master -> master\n```\n\nIt works as expected hooray!\n\nmethods\n=======\n\nvar gitEmit = require('git-emit')\n\nvar emitter = gitEmit(repoDir, cb)\n----------------------------------\n\nInstall hooks into `repoDir`. `repoDir` should be either a .git directory from\nan existing or new project or just a bare git directory created with\n`git init --bare`.\n\n`repoDir` should not have any existing hooks unless they were created with\ngit-emit.\n\nOptionally pass in `cb(err, emitter)` to be notified when the hooks have been\ninstalled into `repoDir` or an error has occured.\n\nemitter.close()\n---------------\n\nShut down the dnode listener used internally by git-emit.\n\nevents\n======\n\nYou can listen for events corresponding to github hooks.\n\nAll events receive an update object.\n\nPassive events fire and cannot influence the acceptance any actions.\n\nAbortable events *MUST* respond to the update object with either\nan `update.accept()` or an `update.reject()`.\n\npassive events\n--------------\n\n* post-applypatch\n* post-commit\n* post-checkout\n* post-merge\n* post-receive\n* post-update\n* post-rewrite\n\nabortable events\n----------------\n\n* applypatch-msg\n* pre-applypatch\n* pre-commit\n* prepare-commit-msg\n* commit-msg\n* pre-rebase\n* pre-receive\n* update\n* pre-auto-gc\n\nupdate object\n=============\n\nAll events are passed an update object as the first argument.\n\nAbortable updates *MUST* call `update.accept()` or `update.reject()`.\n\nSince there may be multiple listeners for any update, all listeners must\n`accept()` an update for it to be ultimately accepted.\n\nupdate.accept()\n---------------\n\nAccept an update.\n\nupdate.reject()\n---------------\n\nReject an update.\n\nupdate.arguments\n----------------\n\nThe raw arguments provided to the git hook on the command line.\n\nupdate.lines\n------------\n\nAn array of lines from `process.stdin`.\n\nThis attribute is only defined for `pre-recieve`, `post-receieve`, and\n`post-rewrite` hooks.\n\nupdate.canAbort\n---------------\n\nWhether the update is abortable.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n    npm install git-emit\n\nlicense\n=======\n\nMIT/X11\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/substack/node-git-emit/issues"
  },
  "_id": "git-emit@0.0.0",
  "_from": "git-emit@*"
}
